#Time:O(N)
#Space:O(N)
#本题思路：利用两个stack储存两个linkedlist的value，然后利用reverse部分思想来记录val


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        stack1, stack2 = [], []
        while l1:
            stack1.append(l1.val)
            l1 = l1.next
        while l2:
            stack2.append(l2.val)
            l2 = l2.next
        dummy = None
        carry = 0
        while stack1 and stack2:
            num1, num2 = stack1.pop(), stack2.pop()
            temp = dummy
            dummy = ListNode((num1 + num2 + carry) % 10)
            dummy.next = temp
            carry = (num1 + num2 + carry) / 10
        while stack1:
            num1 = stack1.pop()
            temp = dummy
            dummy = ListNode((num1 + carry) % 10)
            dummy.next = temp
            carry = (num1 + carry) / 10
        while stack2:
            num2 = stack2.pop()
            temp = dummy
            dummy = ListNode((num2 + carry) % 10)
            dummy.next = temp
            carry = (num2 + carry) / 10
        if carry != 0:
            temp = dummy
            dummy = ListNode(carry)
            dummy.next = temp
        return dummy
        
        
#         l1 = self.reverse(l1)
#         l2 = self.reverse(l2)
        
#         add = 0
#         dummy = ListNode(0)
#         newList = dummy
#         while l1 and l2:
#             newList.next = ListNode((l1.val + l2.val + add) % 10)
#             add = (l1.val + l2.val + add) / 10
#             newList = newList.next
#             l1 = l1.next
#             l2 = l2.next
#         while l1:
#             newList.next = ListNode((l1.val + add) % 10)
#             add = (l1.val + add) / 10
#             newList = newList.next
#             l1 = l1.next
#         while l2:
#             newList.next = ListNode((l2.val + add) % 10)
#             add = (l2.val + add) / 10
#             newList = newList.next
#             l2 = l2.next
#         if add != 0:
#             newList.next = ListNode(add)
#         dummy.next = self.reverse(dummy.next)
#         return dummy.next
            
            
    
#     def reverse(self, head):
#         prev = None
#         while head:
#             temp = head.next
#             head.next = prev
#             prev = head
#             head = temp
#         return prev
