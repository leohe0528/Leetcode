#本题思路：动态规划
1. 怎样达到最优解？ -> 根据题目 可选择走一步或者两步，也就是说到达最后一步的最优解是比较n-1和n-2步的最优解2
2. 最优解子结构？ -> 到达第n步前，我要考虑n-1 + 当前n对应的值 和 n-2 + 当前n对应的值，选择sum较小

class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
#         if not cost:
#             return 0
#         elif len(cost) == 1:
#             return cost[0]
#         elif len(cost) == 2:
#             return min(cost[0], cost[1])
        
        dp = [0] * len(cost)
        dp[0], dp[1] = cost[0], cost[1]
        
        for i in range(2, len(cost)):
            dp[i] = min(dp[i - 2] + cost[i], dp[i - 1] + cost[i])
        return min(dp[-1], dp[-2])
