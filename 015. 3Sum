#Time: O(N2)
#Space: O(N)
#本题思路：先对nums进行排序，对整个nums遍历，left = i+1， right = len(nums) - 1，如果sum == 0 则存到res；若sum<0, 则left+1，若sum>0, 则right+1；同时要注意去重：
1.对于i：if i > 0 and nums[i] == nums[i-1]: continue；除了第一个外，若nums[i]=nums[i-1]，则continue，重复的i会被跳过
2.对于left： while l < r and nums[l] == nums[l+1]: l += 1
3.对于right：while l < r and nums[r] == nums[r-1]: r -= 1
还要注意去完重，left和right也要相应的往后往前移一位

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        if len(nums) < 3:
            return res
        
        nums.sort()
        for i in range(len(nums) - 2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            
            l, r = i + 1, len(nums) - 1
            while l < r:
                _sum = nums[l] + nums[r] + nums[i]
                
                if _sum == 0:
                    curr = [nums[i], nums[l], nums[r]]
                    res.append(curr)
                    while l < r and nums[l] == nums[l+1]:
                        l += 1
                    while l < r and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1
                    r -= 1
                elif _sum < 0:
                    l += 1
                elif _sum > 0:
                    r -= 1
                    
        return res
