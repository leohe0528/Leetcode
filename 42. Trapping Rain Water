#Time: O(N)
#Space: O(N)
#本题思路：解题关键是理解min(leftMostHeight[i], rightMax) - height[i]，比较leftmostheight以及rightmostheight，小的那个height减去height[i] 即是当前i能储存水的量；leftMostHeight从左边开始，更新leftMax，且让每个leftMostHeight等于leftMax；同理rightMostHeight，但是为了省下rightMostHeight这个空间，从右往左iterate，每次i得到rightMax，然后与对应的leftMostHeight进行比较

class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        leftMostHeight = [0 for i in range(len(height))]
        leftMax = 0
        for i in range(len(height)):
            if height[i] > leftMax:
                leftMax = height[i]
            leftMostHeight[i] = leftMax
        
        rightMax = 0
        res = 0
        for i in range(len(height)-1, -1, -1):
            if height[i] > rightMax:
                rightMax = height[i]
            if min(leftMostHeight[i], rightMax) > height[i]:
                res += min(leftMostHeight[i], rightMax) - height[i]
        return res
        
    # def trap(self, height):
    #     n = len(height)
    #     l, r, water, minHeight = 0, n - 1, 0, 0
    #     while l < r:
    #         while l < r and height[l] <= minHeight:
    #             water += minHeight - height[l]
    #             l += 1
    #         while r > l and height[r] <= minHeight:
    #             water += minHeight - height[r]
    #             r -= 1
    #         minHeight = min(height[l], height[r])
    #     return water
