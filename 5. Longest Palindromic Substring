#Time: O(n2)
#Space: O(1)
#本题思路：1.中心扩展发，每个s的元素都看作中心，然后往两边走，若相等则left -= 1， right += 1，注意边界条件，left >= 0, right < len(s)
          2. 第二个注意是奇偶问题，有可能是 aba （b为中心左右扩展），也有可能是 abba（bb为中心左右扩展）
class Solution(object):        
    def longestPalindrome(self, s):
        palindrome = ''
        for i in range(len(s)):
            len1 = len(self.getPalindrome(s, i, i))
            if len1 > len(palindrome):
                palindrome = self.getPalindrome(s, i, i)
            len2 = len(self.getPalindrome(s, i, i+1))
            if len2 > len(palindrome):
                palindrome = self.getPalindrome(s, i, i+1)
        return palindrome
    
    def getPalindrome(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1 : r]
