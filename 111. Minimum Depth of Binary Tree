#本题思路：在BFS方法中 
1. popleft要值得注意，因为append进去的元素是在最右边，如果不是popleft而是pop，则会一直检测某一边的node 而不是同一水平的node；所以queue先进先出的原理很重要
2. 添加的元素可以是一个set
3. 如果node的left和right同为None，则return level，否则左右两侧同时增加level

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
# # DFS
# def minDepth1(self, root):
#     if not root:
#         return 0
#     if None in [root.left, root.right]:
#         return max(self.minDepth(root.left), self.minDepth(root.right)) + 1
#     else:
#         return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
 
# BFS   
    def minDepth(self, root):
        if not root:
            return 0
        
        queue = collections.deque([(root, 1)])
        while queue:
            node, level = queue.pop()
            if node:
                if not node.left and not node.right:
                    return level
                else:
                    queue.append((node.left, level + 1))
                    queue.append((node.right, level + 1))
