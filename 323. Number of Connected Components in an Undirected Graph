#本题思路：例子 [[0,1],[1,2],[3,4]]
#1. 构造graph， 因为是undirected：
    0: 1
    1: 0 2
    2: 1
    3: 4
    4: 3
#2. 用seen来记录是否遍历过
#3. 若不在seen，则进行bfs
 3.1 参考下面

class Solution(object):
    def countComponents(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: int
        """

        graph = {i: set() for i in xrange(n)}

        for v1, v2 in edges:
            graph[v1].add(v2)
            graph[v2].add(v1)

        seen = set()
        count = 0
        for i in range(n):
            if i not in seen:
                self.bfs(i, graph, seen)
                count += 1
        return count
    def bfs(self, node, graph, seen):
        queue = [node]
        #3.1第一次循环，queue只有0这个node，graph[0]对应只有1，第一次循环把1加进去，然后queue接着加1，接着开始遍历1所连接的node：
        #第一次遍历： 0 -> 1; 第二次遍历：1 -> 0 和 1 -> 2, 在第二次遍历中1，0，2会被进seen里面；第三次遍历，由于queue里面是1，0，2（1已经在第一次循环被遍历，轮到0),由于0已经在seen里面，所以跳到2，在graph[2]里头，node:1 也在seen里面,所以不会发生什么事，然后跳出bfs，此时seen有0，1，2，count = 1； 接着把[3,4]丢进循环里，重复上述所述
        for n in queue:
            for nei in graph[n]:
                if nei not in seen:
                    seen.add(nei)
                    queue.append(nei)
